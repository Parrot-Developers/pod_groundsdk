// Copyright (C) 2019 Parrot Drones SAS
//
//    Redistribution and use in source and binary forms, with or without
//    modification, are permitted provided that the following conditions
//    are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in
//      the documentation and/or other materials provided with the
//      distribution.
//    * Neither the name of the Parrot Company nor the names
//      of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written
//      permission.
//
//    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
//    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//    PARROT COMPANY BE LIABLE FOR ANY DIRECT, INDIRECT,
//    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
//    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
//    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
//    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//    SUCH DAMAGE.

import Foundation

/// Type of a debug setting.
public enum DebugSettingType: Int, CustomStringConvertible {
    /// Debug setting is a 'BooleanDebugSetting'.
    case boolean
    /// Debug setting is a 'TextDebugSetting'.
    case text
    /// Debug setting is a 'NumericDebugSetting'.
    case numeric

    /// Debug description.
    public var description: String {
        switch self {
        case .boolean: return "boolean"
        case .text: return "text"
        case .numeric: return "numeric"
        }
    }
}

/// Debug setting.
public protocol DebugSetting: AnyObject {
    /// Tells if the setting value has been changed and is waiting for change confirmation.
    var updating: Bool { get }

    /// Setting type.
    var type: DebugSettingType { get }

    /// Setting name.
    var name: String { get }

    /// Tells if the setting is ready only.
    var readOnly: Bool { get }
}

/// DebugSetting that has a boolean value.
public protocol BoolDebugSetting: DebugSetting {
    /// Setting current value.
    var value: Bool { get set }
}

/// DebugSetting that has a textual value.
public protocol TextDebugSetting: DebugSetting {
    /// Setting current value.
    var value: String { get set }
}

/// DebugSetting that has a numerical value.
public protocol NumericDebugSetting: DebugSetting {
    /// Setting current value.
    var value: Double { get set }

    /// Setting value bounds.
    var range: ClosedRange<Double>? { get }

    /// Setting value step.
    var step: Double? { get }
}

/// Development toolbox peripheral.
///
/// This peripheral is a debugging peripheral. It gives access to debugging settings.
/// It is accessible only if the config enables it (see `GroundSdkConfig`).
///
/// This peripheral can be retrieved by:
/// ```
/// device.getPeripheral(Peripherals.devToolbox)
/// ```
public protocol DevToolbox: Peripheral {

    /// Debug settings.
    var debugSettings: [DebugSetting] { get }

    /// Sends a debug tag to the drone.
    ///
    /// The drone will write this tag in its debug logs.
    ///
    /// - Parameter tag: debug tag to send, shall be a single-line string
    func sendDebugTag(tag: String)

    /// Latest debug tag id generated by the drone at reception of a debug tag.
    var latestDebugTagId: String? { get }
}

/// :nodoc:
/// DevToolbox description.
public class DevToolboxDesc: NSObject, PeripheralClassDesc {
    public typealias ApiProtocol = DevToolbox
    public let uid = PeripheralUid.devToolbox.rawValue
    public let parent: ComponentDescriptor? = nil
}
